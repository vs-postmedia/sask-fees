{"version":3,"sources":["fonts/Shift-BoldItalic.otf","fonts/Shift-Bold.otf","fonts/BentonSansCond-Regular.otf","fonts/BentonSansCond-RegItalic.otf","fonts/BentonSansCond-Bold.otf","fonts/BentonSansCond-BoldItalic.otf","components/Input/Input.js","components/Card/Card.js","components/CardList/CardList.js","components/Layout/Layout.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Input","state","value","id","type","placeholder","this","onChange","props","Component","Card","pageCost","otherFees","d","data","totalCost","total_cost","other_fees","className","parseFloat","page_cost","note","doc_notes","length","url","website","includes","split","muni","href","rel","target","response_time","CardList","sort","a","b","parseInt","route","map","i","key","city","Layout","filteredData","defaultMessage","that","Tabletop","init","dataURL","simpleSheet","then","tabletop","setState","event","selectedData","filter","toLowerCase","results","handleInputChange","bind","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ccc4db1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Shift-BoldItalic.5c3edbfd.otf\";","module.exports = __webpack_public_path__ + \"static/media/Shift-Bold.cdd38a86.otf\";","module.exports = __webpack_public_path__ + \"static/media/BentonSansCond-Regular.43cd4ac7.otf\";","module.exports = __webpack_public_path__ + \"static/media/BentonSansCond-RegItalic.69a4217c.otf\";","module.exports = __webpack_public_path__ + \"static/media/BentonSansCond-Bold.6f6753fd.otf\";","module.exports = __webpack_public_path__ + \"static/media/BentonSansCond-BoldItalic.a6640d89.otf\";","import React, { Component, Fragment } from 'react';\n\nexport class Input extends Component {\n\tstate = {value: 'Look up a city...'};\n\n\trender() {\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<label id=\"input\">\n\t\t\t\t\t<input type=\"text\" placeholder={this.state.value} onChange={this.props.onChange}/>\n\t\t\t\t</label>\n\t\t\t</Fragment>\n\t\t)\n\t}\n\t\n}\n\nexport default Input;","import React from 'react';\nimport './Card.css';\n\nconst Card = (props) => {\n\tconst d = props.data;\n\tlet pageCost, otherFees;\n\n\t// total cost\n\tlet totalCost = d.total_cost;\n\tif (d.total_cost === '') {\n\t\ttotalCost = 'N/A';\n\t} else if (d.total_cost !== 'Not provided') {\n\t\ttotalCost = `$${d.total_cost}`;\n\t}\n\n\t// conditionally show page costs & other fees\n\tif (d.other_fees !== '') {\n\t\totherFees = <p className=\"fee-details\">{`Other fees: ${d.other_fees}`}</p>\n\t}\n\tif (parseFloat(d.page_cost) > 0) {\n\t\tpageCost = <p className=\"fee-details\">{`Cost/page: $${d.page_cost}`}</p>;\n\t}\n\n\t// same for document notes \n\tconst note = d.doc_notes.length > 0 ? <p className=\"info\"><strong>Note: </strong>{`${d.doc_notes}`}</p> : ''\n\n\t// parse website string\n\tconst url = d.website.includes('http') ? d.website : 'no-url';\n\tconst website = d.website.includes('http') ? d.website.split('//')[1].split('/')[0] : d.website;\n\t\n\treturn (\n\t\t<div className=\"card\">\n\t\t\t<header>\n\t\t\t\t<h2>{d.muni}</h2>\n\t\t\t\t<a className={`url ${url}`} href={url} rel=\"noopener noreferrer\" target=\"_blank\">{website}</a>\n\n\t\t\t</header>\n\n\t\t\t<div className=\"data-section\">\n\t\t\t\t<div className=\"cost\">\n\t\t\t\t\t<h3 className=\"day\">Total cost</h3>\n\t\t\t\t\t<p className=\"time\">{`${totalCost}`}</p>\n\t\t\t\t\t{pageCost}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"response\">\n\t\t\t\t\t<h3>Response time</h3>\n\t\t\t\t\t<p>{d.response_time}</p>\n\t\t\t\t\t{otherFees}\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{note}\n\t\t</div>\n\t);\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from '../Card/Card';\nimport './CardList.css';\n\n\nconst CardList = (props) => {\n\tconst data = props.data.sort((a,b) => {\n\t\treturn parseInt(b.route) - parseInt(a.route);\n\t});\n\n \treturn (\n \t\t<div className=\"card-list\">\n \t\t\t{data.map((d,i) => {\n \t\t\t\treturn (\n \t\t\t\t\t<Card className='card' data={d} key={i} id={d.city}></Card>\n \t\t\t\t)\n \t\t\t})}\n \t\t</div>\n \t)\n\t\n}\n\n\nexport default CardList;\n","import React, { Component, Fragment } from 'react';\nimport Tabletop from 'tabletop';\nimport Input from '../Input/Input';\nimport CardList from '../CardList/CardList';\nimport './Layout.css';\n\nexport class Layout extends Component {\n\tstate = {\n\t\tdata: [],\n\t\tfilteredData: [],\n\t\tdefaultMessage: 'Loading data...'\n\t};\n\n\tcomponentDidMount() {\n\t\tconst that = this;\n\t\tTabletop.init({\n\t\t\t\tkey: this.props.dataURL,\n\t\t\t\tsimpleSheet: true\n\t\t\t}).then(function(data, tabletop) { \n\t\t\t\tthat.setState({\n\t\t\t\t\tdata: data,\n\t\t\t\t\tfilteredData: data\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\thandleInputChange(event) {\n\t\tconst selectedData = event.target.value === '' ? this.state.data : this.state.data.filter(d => d.muni.toLowerCase().includes(event.target.value.toLowerCase()));\n\n\t\tthis.setState({\n\t\t\tfilteredData: selectedData\n\t\t});\n\t}\n\n\trender() {\n\t\tlet results;\n\t\tif (this.state.filteredData.length > 0) {\n\t\t\tresults = <CardList data={this.state.filteredData}></CardList>;\n\t\t} else {\n\t\t\tresults = <p className=\"no-data\">{this.state.defaultMessage}</p>;\n\t\t}\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<h1>Fees May Apply</h1>\n\t\t\t\t<Input onChange={this.handleInputChange.bind(this)}></Input>\n\t\t\t\t{results}\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\n\nexport default Layout;","import React from 'react';\nimport Layout from '../Layout/Layout';\nimport './App.css';\n\n// VARS\nconst dataURL = 'https://docs.google.com/spreadsheets/d/1Q_y_GKBnxryHc6_5kYRtPZqOpbVTHVdV274pNtCJvug/edit?usp=sharing';\n\nfunction App() {\n\treturn (\n\t  \t<div className=\"App\">\n\t  \t\t<Layout dataURL={dataURL}></Layout>\n\t  \t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\n// CSS\nimport './css/index.css';\n\n// FONTS\nimport './fonts/Shift-Bold.otf';\nimport './fonts/Shift-BoldItalic.otf';\nimport './fonts/Shift-BoldItalic.otf';\nimport './fonts/BentonSansCond-Regular.otf';\nimport './fonts/BentonSansCond-RegItalic.otf';\nimport './fonts/BentonSansCond-Bold.otf';\nimport './fonts/BentonSansCond-BoldItalic.otf';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}